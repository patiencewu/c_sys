<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	                    http://www.springframework.org/schema/context
	                    http://www.springframework.org/schema/context/spring-context-3.1.xsd
	                    http://www.springframework.org/schema/aop
	                    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	                    http://www.springframework.org/schema/tx 
	                    http://www.springframework.org/schema/tx/spring-tx.xsd">

	
	<!-- 开启组建自动扫描，扫描的路径有base-package属性指定  -->
	<context:component-scan base-package="org.dao" />
	<context:component-scan base-package="org.dao.service"/>
	<context:component-scan base-package="org.humanDepartment.humanSystem.action"/>
	<context:component-scan base-package="org.humanDepartment.humanSystem.pojo"/>
	<context:component-scan base-package="org.model"/>
	
	<!-- 开启基于@AspectJ的注解处理器 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/c_sys?useUnicode=true&amp;characterEncoding=utf8"/>
		<property name="username" value="root"/>
		<property name="password" value=""/>
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		
		<!-- 注册Hibernate的ORM映射文件 -->
		<property name="mappingResources">
			<list>
				<value>org/humanDepartment/humanSystem/pojo/Department.hbm.xml</value>
				<value>org/humanDepartment/humanSystem/pojo/Departmentemployee.hbm.xml</value>
				<value>org/humanDepartment/humanSystem/pojo/Departmentmanager.hbm.xml</value>
				<value>org/humanDepartment/humanSystem/pojo/Members.hbm.xml</value>
				<value>org/humanDepartment/humanSystem/pojo/Supermanager.hbm.xml</value>
				<value>org/humanDepartment/humanSystem/pojo/Team.hbm.xml</value>
				<value>org/humanDepartment/humanSystem/pojo/Userpassword.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<!-- 设置在控制台输出SQL语句 -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- hibernate4的事务管理的currentSession的配置 -->
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<!-- 配置语言翻译包（用于hql中使用中文） -->
				<prop key="hibernate.query.factory_class">org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory</prop>
				<!-- 配置hibernate的乐观锁 -->
				<prop key="hibernate.connection.isolation">2</prop>
			</props>
		</property>
	</bean>
	
	<bean id="springUtil" class="org.model.SpringUtil" />
	
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<tx:advice id="baseServiceAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" propagation="REQUIRED" rollback-for="Exception"/><!--之前是NOT_SUPPORT-->
            <tx:method name="find*" read-only="true" propagation="REQUIRED" rollback-for="Exception"/><!--之前是NOT_SUPPORT-->
            <tx:method name="load*" read-only="true" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <!--默认其他方法都是REQUIRED-->
            <tx:method name="*" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    
    <!-- 注释驱动器 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	<aop:config proxy-target-class="true"> 
	<!-- 只对业务逻辑层实施事务 -->
	<aop:advisor advice-ref="baseServiceAdvice" pointcut="execution(* org.dao.service..*.*(..))" /> 
	</aop:config>
	
	<!-- 定义BeanNameAutoProxyCreate进行Spring的事务管理-->
	<bean id="beanNameAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"
		abstract="false" lazy-init="default" autowire="default">
		<property name="beanNames">
			<list>
				<value>userpassworService</value>
				<value>supermanagerService</value>
				<value>departmentmanagerService</value>
				<value>dapartmentemployeeService</value>
				<value>membersService</value>
				<value>teamService</value>
			</list>
		</property>
		<!-- 这个属性为true时，表示被代理的是目标类本身而不是目标类的接口 -->
		<property name="proxyTargetClass">
			<value>true</value>
		</property>
		<!-- 依赖注入上面定义的事物拦截器transactionInterceptor -->
		<property name="interceptorNames">
			<list>
				<value>baseServiceAdvice</value>
			</list>
		</property>
	</bean>
	<bean id="dao" class="org.dao.BaseDao" abstract="false"
		lazy-init="default" autowire="default">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="department"
		class="org.humanDepartment.humanSystem.pojo.Department"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="departmentEmployee"
		class="org.humanDepartment.humanSystem.pojo.Departmentemployee"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="departmentManager"
		class="org.humanDepartment.humanSystem.pojo.Departmentmanager"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="members"
		class="org.humanDepartment.humanSystem.pojo.Members" abstract="false"
		lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="superManager"
		class="org.humanDepartment.humanSystem.pojo.Supermanager"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="team" class="org.humanDepartment.humanSystem.pojo.Team"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="userPassword"
		class="org.humanDepartment.humanSystem.pojo.Userpassword"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="departmentManagerToEmployee"
		class="org.humanDepartment.humanSystem.action.DepartmentManagerToEmployee"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="departmentToMember"
		class="org.humanDepartment.humanSystem.action.DepartmentToMember"
		abstract="false" lazy-init="default" autowire="default"
		scope="prototype">
	</bean>



	<bean id="departmentToTeam"
		class="org.humanDepartment.humanSystem.action.DepartmentToTeam"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="login"
		class="org.humanDepartment.humanSystem.action.Login" abstract="false" scope="prototype"
		lazy-init="default" autowire="default">
		<property name="service" ref="userpasswordService"/>
	</bean>


	
	<bean id="memberToTeam"
		class="org.humanDepartment.humanSystem.action.MemberToTeam"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="superManagerToDepartmentManager"
		class="org.humanDepartment.humanSystem.action.SuperMangerToDepartmentManager"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="teamToDepartment"
		class="org.humanDepartment.humanSystem.action.TeamToDepartment"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	
	
	<bean id="teamToMember"
		class="org.humanDepartment.humanSystem.action.TeamToMember"
		abstract="false" lazy-init="default" autowire="default">
	</bean>
	
	<bean id="userpasswordService"
		class="org.dao.service.UserpasswordServiceImpl" abstract="false"
		lazy-init="default" autowire="default">
		<property name="dao" ref="dao" />
	</bean>
	<bean id="teamService" class="org.dao.service.TeamServiceImpl"
		abstract="false" lazy-init="default" autowire="default">
		<property name="dao" ref="dao" />
	</bean>
	<bean id="supermanagerService"
		class="org.dao.service.SupermanagerServiceImpl" abstract="false"
		lazy-init="default" autowire="default" scope="prototype">
		<property name="dao" ref="dao" />
	</bean>
	<bean id="membersService" class="org.dao.service.MembersServiceImpl"
		abstract="false" lazy-init="default" autowire="default">
		<property name="dao" ref="dao" />
	</bean>
	<bean id="departmentService"
		class="org.dao.service.DepartmentServiceImpl" abstract="false"
		lazy-init="default" autowire="default">
		<property name="dao" ref="dao" />
	</bean>
	<bean id="departmentmanagerService"
		class="org.dao.service.DepartmentmanagerServiceImpl" abstract="false"
		lazy-init="default" autowire="default">
		<property name="dao" ref="dao" />
	</bean>
	<bean id="departmentemployee"
		class="org.humanDepartment.humanSystem.pojo.Departmentemployee"
		abstract="false" lazy-init="default" autowire="default"
		scope="prototype">
	</bean>
	<bean id="departmentemployeeService"
		class="org.dao.service.DepartmentemployeeServiceImpl" abstract="false"
		lazy-init="default" autowire="default" scope="prototype">
		<property name="dao" ref="dao" />
	</bean>
	<bean id="register"
		class="org.humanDepartment.humanSystem.action.Register"
		abstract="false" lazy-init="default" autowire="default"
		scope="prototype">
		<property name="uService">
			<ref bean="userpasswordService" />
		</property>
		<property name="mService">
			<ref bean="membersService" />
		</property>
	</bean>
	<bean id="manager"
		class="org.humanDepartment.humanSystem.action.Manager"
		abstract="false" lazy-init="default" autowire="default"
		scope="prototype">
	</bean></beans>